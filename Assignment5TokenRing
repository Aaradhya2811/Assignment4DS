import java.io.*;
import java.util.*;

class Tok {

public static void main(String args[]) throws Throwable {
Scanner scan = new Scanner(System.in);
System.out.println("Enter the num of nodes:");
int n = scan.nextInt();
int m = n - 1;
// Decides the number of nodes forming the ring
int token = 0;
int ch = 0, flag = 0;
for (int i = 0; i < n; i++) {
System.out.print(" " + i);
}
System.out.println(" " + 0);
do{
System.out.println("Enter sender:");
int s = scan.nextInt();
System.out.println("Enter receiver:");
int r = scan.nextInt();
System.out.println("Enter Data:");
int a;
a = scan.nextInt();
System.out.print("Token passing:");
for (int i = token, j = token; (i % n) != s; i++, j = (j + 1) % n) {
System.out.print(" " + j + "->");
}
System.out.println(" " + s);
System.out.println("Sender " + s + " sending data: " + a);
for (int i = s + 1; i != r; i = (i + 1) % n) {
System.out.println("data " + a + " forwarded by " + i);
}
System.out.println("Receiver " + r + " received data: " + a +"\n");
token = s;
do{
try {
if( flag == 1)
System.out.print("Invalid Input!!...");
System.out.print("Do you want to send again?? enter 1 for Yes and 0 for No : ");
ch = scan.nextInt();
if( ch != 1 && ch != 0 )
flag = 1;
else
flag = 0;
} catch (InputMismatchException e){
System.out.println("Invalid Input");
}
}while( ch != 1 && ch != 0 );
}while( ch == 1 );
}
}


//Ring



import java.util.Scanner;

public class Ring {

public static void main(String[] args) {

// TODO Auto-generated method stub

int temp, i, j;
char str[] = new char[10];
Rr proc[] = new Rr[10];

// object initialisation
for (i = 0; i < proc.length; i++)
proc[i] = new Rr();

// scanner used for getting input from console
Scanner in = new Scanner(System.in);
System.out.println("Enter the number of process : ");
int num = in.nextInt();

// getting input from users
for (i = 0; i < num; i++) {
proc[i].index = i;
System.out.println("Enter the id of process : ");
proc[i].id = in.nextInt();
proc[i].state = "active";
proc[i].f = 0;
}


// sorting the processes from on the basis of id
for (i = 0; i < num - 1; i++) {
for (j = 0; j < num - 1; j++) {
if (proc[j].id > proc[j + 1].id) {
temp = proc[j].id;
proc[j].id = proc[j + 1].id;
proc[j + 1].id = temp;
}
}
}


for (i = 0; i < num; i++) {
System.out.print(" [" + i + "]" + " " + proc[i].id);
}




int init;
int ch;
int temp1;
int temp2;
int ch1;
int arr[] = new int[10];

proc[num - 1].state = "inactive";

System.out.println("\n process " + proc[num - 1].id + " select as co-ordinator");

while (true) {
System.out.println("\n 1.election 2.quit ");
ch = in.nextInt();

for (i = 0; i < num; i++) {
proc[i].f = 0;
}

switch (ch) {
case 1:
System.out.println("\n Enter the Process number who initialsied election : ");
init = in.nextInt();
temp2 = init;
temp1 = init + 1;

i = 0;

while (temp2 != temp1) {
if ("active".equals(proc[temp1].state) && proc[temp1].f == 0) {

System.out.println("\nProcess " + proc[init].id + " send message to " + proc[temp1].id);
proc[temp1].f = 1;
init = temp1;
arr[i] = proc[temp1].id;
i++;
}
if (temp1 == num) {
temp1 = 0;
} else {
temp1++;
}
}

System.out.println("\nProcess " + proc[init].id + " send message to " + proc[temp1].id);
arr[i] = proc[temp1].id;
i++;
int max = -1;


// finding maximum for co-ordinator selection
for (j = 0; j < i; j++) {
if (max < arr[j]) {
max = arr[j];
}
}

// co-ordinator is found then printing on console
System.out.println("\n process " + max + "select as co-ordinator");


for (i = 0; i < num; i++) {

if (proc[i].id == max) {
proc[i].state = "inactive";
}
}
break;
case 2:
System.out.println("Program terminated ...");
return ;
default:
System.out.println("\n invalid response \n");
break;
}


}
}

}

class Rr {

public int index; // to store the index of process
public int id; // to store id/name of process
public int f;
String state; // indiactes whether active or inactive state of node

}
